#!/usr/bin/env mksh
#

Color_Off='\e[0m'
Bold="$(tput bold)"
Reset='\e[0m'
BRed='\e[1;31m'
Red='\e[0;31m'
Green='\e[0;32m'
BGreen='\e[1;32m'
Orange='\e[0;33m'
BOrange='\e[1;33m'

# === {{CMD}}  path/to/file.sh

SH_SPECS_DIR="$1"; shift
ORIGIN_DIR="$PWD"

TEMP_PREFIX="/tmp/sh_specs.temp.$$"
FILE="$1"; shift
export IS_SPEC_RUN="YES"

# === Figure out if specs is defined.
# === We can't simply "source" the file because the file would most likely
# ===   have dependecnies relative to it's original location. In other words,
# ===   it would have unknown behaviour.
SPEC_LINE="$(grep -n -m 1 --perl-regexp "^\ *specs\ +\(" "$FILE" | cut -d: -f1 || :)"
CODE=""
if [[ ! -z "$SPEC_LINE" ]]; then
  CODE="$(tail -n +${SPEC_LINE} "$FILE")"
fi

if [[  ! -f  "$FILE" ]]; then
  mksh_setup RED "=== Spec file {{not found}}: BOLD{{$FILE}}"
  exit 1
fi

cd "$SH_SPECS_DIR"
for FUNC_FILE in $(find "bin/shoulds/" -maxdepth 1 -mindepth 1 -name "*.sh" -print); do
  source "$SH_SPECS_DIR/$FUNC_FILE"
done
cd "$ORIGIN_DIR"

# NOTE: We can't use 'specs || report-fail'
#  because of this:
#  http://stackoverflow.com/questions/4072984/set-e-in-a-function
trap 'report-fail $?' EXIT

THIS_DIR="$ORIGIN_DIR"
if [[ -z "$CODE" ]]; then
  source "$FILE"
else
  TMP="$(mktemp "$TEMP_PREFIX".XXXXXXXXXXXXXXXXXX)"
  echo "$CODE" > $TMP
  source "$TMP"
  specs
fi

rm -f "$TEMP_PREFIX".*
trap - EXIT


